---
- name: General setup
  hosts: all
  become: yes
  tasks:

    - name: Add entries to /etc/hosts
      template:
        src: configs/hosts
        dest: /etc/hosts

- name: Install Java
  hosts: elasticsearch
  become: yes
  tasks:

    - name: Install Default JRE
      apt:
        name: default-jre
        state: present
        update_cache: yes

###############################################################################
# ELASTICSEARCH
###############################################################################

- name: Install Elasticsearch
  hosts: elasticsearch
  become: yes
  tasks:

    - name: Install Elasticsearch package
      apt:
        deb: https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.9.2-amd64.deb

    - name: Configure JVM
      template:
        src: configs/elasticsearch-memory.jvm.options
        dest: /etc/elasticsearch/jvm.options.d/elasticsearch-memory.jvm.options
        owner: root
        group: elasticsearch
        mode: '0660'

    - name: Configure seed hosts
      template:
        src: configs/unicast_hosts.txt
        dest: /etc/elasticsearch/unicast_hosts.txt
        owner: root
        group: elasticsearch
        mode: '0660'

    - name: Configure limits
      pam_limits:
        domain: elasticsearch
        limit_item: "{{ item.item }}"
        limit_type: "-"
        value: "{{ item.value }}"
      loop:
        - { item: "nofile", value: "65535" }
        - { item: "nproc", value: "4096" }

    - name: Increase memory limits
      sysctl:
        name: vm.max_map_count
        sysctl_set: yes
        value: "262144"

    - name: Reduce swappiness
      sysctl:
        name: vm.swappiness
        sysctl_set: yes
        value: "1"

    - name: Copy root CA certificate
      copy:
        src: certificates/ca/ca.crt
        dest: /etc/elasticsearch/ca.crt
        owner: root
        group: elasticsearch
        mode: '0660'

    - name: Copy certificate
      copy:
        src: certificates/{{ inventory_hostname }}/{{ inventory_hostname }}.crt
        dest: /etc/elasticsearch/{{ inventory_hostname }}.crt
        owner: root
        group: elasticsearch
        mode: '0660'

    - name: Copy key
      copy:
        src: certificates/{{ inventory_hostname }}/{{ inventory_hostname }}.key
        dest: /etc/elasticsearch/{{ inventory_hostname }}.key
        owner: root
        group: elasticsearch
        mode: '0660'

- name: Configure master-eligible nodes
  hosts: master
  become: yes
  tasks:

    - name: Configure Elasticsearch
      template:
        src: configs/elasticsearch.yml
        dest: /etc/elasticsearch/elasticsearch.yml
        owner: root
        group: elasticsearch
      notify:
        - Restart Elasticsearch

    # In the first run-through, Elasticsearch is not running at this point. We
    # need to start it so we can check if the elastic user password has been
    # set.
    - name: Start Elasticsearch
      systemd:
        name: elasticsearch
        state: started

    - name: Check if elastic user password is set
      uri:
        url: https://elasticsearch1:9200/_cluster/health
        force_basic_auth: yes
        status_code: [200, 401]
        url_username: elastic
        url_password: "{{ elastic_password }}"
        validate_certs: no
      register: bootstrap_req
      until: '"Connection refused" not in bootstrap_req.msg'
      when: inventory_hostname == "elasticsearch1"

    - name: Set elastic user password
      block:
        - name: Stop Elasticsearch
          systemd:
            name: elasticsearch
            state: stopped

        - name: Check if bootstrap password is set
          command: /usr/share/elasticsearch/bin/elasticsearch-keystore list
          changed_when: no
          register: elasticsearch_keystore_keys

        - name: Set bootstrap password
          shell: "echo {{ bootstrap_password }} | /usr/share/elasticsearch/bin/elasticsearch-keystore add bootstrap.password --stdin"
          when: '"bootstrap.password" not in elasticsearch_keystore_keys.stdout'

        - name: Start Elasticsearch
          systemd:
            name: elasticsearch
            state: started

        - name: Set elastic user password
          uri:
            url: https://elasticsearch1:9200/_xpack/security/user/elastic/_password
            body: '{"password": "{{ elastic_password }}"}'
            body_format: json
            force_basic_auth: yes
            method: PUT
            url_username: "elastic"
            url_password: "{{ bootstrap_password }}"
            validate_certs: no
          notify:
            - Restart Elasticsearch
      when: inventory_hostname == "elasticsearch1" and bootstrap_req.status == 401

    - name: Enable Elasticsearch service
      systemd:
        name: elasticsearch
        enabled: yes

  handlers:

    - name: Restart Elasticsearch
      systemd:
        name: elasticsearch
        state: restarted

- name: Configure coordinating-only node
  hosts: coordinating
  become: yes
  tasks:

    - name: Configure Elasticsearch
      template:
        src: configs/coordinator.yml
        dest: /etc/elasticsearch/elasticsearch.yml
        owner: root
        group: elasticsearch
      notify:
        - Restart Elasticsearch

    - name: Enable Elasticsearch service
      systemd:
        name: elasticsearch
        enabled: yes

  handlers:

    - name: Restart Elasticsearch
      systemd:
        name: elasticsearch
        state: restarted

###############################################################################
# KIBANA
###############################################################################

- name: Install Kibana
  hosts: kibana
  become: yes
  tasks:

    - name: Install Kibana package
      apt:
        deb: https://artifacts.elastic.co/downloads/kibana/kibana-7.9.2-amd64.deb

    - name: Configure Kibana
      template:
        src: configs/kibana.yml
        dest: /etc/kibana/kibana.yml
      notify:
        - Restart Kibana

    - name: Copy root CA certificate
      copy:
        src: certificates/ca/ca.crt
        dest: /etc/kibana/ca.crt
      notify:
        - Restart Kibana

    - name: Copy certificate
      copy:
        src: certificates/{{ inventory_hostname }}/{{ inventory_hostname }}.crt
        dest: /etc/kibana/{{ inventory_hostname }}.crt
      notify:
        - Restart Kibana

    - name: Copy key
      copy:
        src: certificates/{{ inventory_hostname }}/{{ inventory_hostname }}.key
        dest: /etc/kibana/{{ inventory_hostname }}.key
        owner: root
        group: kibana
        mode: 0660
      notify:
        - Restart Kibana

    - name: Install plugin
      command: /usr/share/kibana/bin/kibana-plugin --allow-root install https://github.com/scorestack/scorestack/releases/download/v0.8.1/kibana-plugin-v0.8.1.zip
      args:
        creates: /usr/share/kibana/plugins/scorestack
      notify:
        - Restart Kibana

    - name: Enable Kibana service
      systemd:
        name: kibana
        enabled: yes

  handlers:

    - name: Restart Kibana
      systemd:
        name: kibana
        state: restarted

###############################################################################
# NGINX
###############################################################################

- name: Install Nginx
  hosts: nginx
  become: yes
  tasks:

    - name: Install Nginx package
      apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Configure Nginx
      copy:
        src: configs/nginx.conf
        dest: /etc/nginx/nginx.conf
      notify:
        - Restart Nginx

    - name: Configure Nginx server blocks
      template:
        src: "configs/{{ item }}"
        dest: "/etc/nginx/conf.d/{{ item }}"
      loop:
        - elasticsearch.conf
        - kibana.conf
      notify:
        - Restart Nginx

    - name: Copy root CA certificate
      copy:
        src: certificates/ca/ca.crt
        dest: /etc/nginx/ca.crt
      notify:
        - Restart Nginx

    - name: Copy certificate
      copy:
        src: certificates/{{ inventory_hostname }}/{{ inventory_hostname }}.crt
        dest: /etc/nginx/{{ inventory_hostname }}.crt
      notify:
        - Restart Nginx

    - name: Copy key
      copy:
        src: certificates/{{ inventory_hostname }}/{{ inventory_hostname }}.key
        dest: /etc/nginx/{{ inventory_hostname }}.key
        mode: 0600
      notify:
        - Restart Nginx

    - name: Enable Nginx
      systemd:
        name: nginx
        enabled: yes

  handlers:

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
